volumes:
  maiagent_local_postgres_data: {}
  maiagent_local_postgres_data_backups: {}
  maiagent_local_redis_data: {}
  maiagent_local_elasticsearch_data: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: maiagent_local_django
    container_name: maiagent_local_django
    depends_on:
      - postgres
      - redis
      - elasticsearch
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
      - ./.envs/.local/.elasticsearch
    ports:
      - '8000:8000'
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: maiagent_production_postgres
    container_name: maiagent_local_postgres
    volumes:
      - maiagent_local_postgres_data:/var/lib/postgresql/data
      - maiagent_local_postgres_data_backups:/backups
    env_file:
      - ./.envs/.local/.postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: debug
      POSTGRES_PASSWORD: debug
      POSTGRES_DB: maiagent

  redis:
    image: docker.io/redis:6
    container_name: maiagent_local_redis
    volumes:
      - maiagent_local_redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: maiagent_local_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - maiagent_local_elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200 >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  celeryworker:
    <<: *django
    image: maiagent_local_celeryworker
    container_name: maiagent_local_celeryworker
    depends_on:
      - redis
      - postgres
      - elasticsearch
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: maiagent_local_celerybeat
    container_name: maiagent_local_celerybeat
    depends_on:
      - redis
      - postgres
      - elasticsearch
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    image: maiagent_local_flower
    container_name: maiagent_local_flower
    ports:
      - '5555:5555'
    command: /start-flower

  node:
    build:
      context: .
      dockerfile: ./compose/local/node/Dockerfile
    image: maiagent_local_node
    container_name: maiagent_local_node
    depends_on:
      - django
    volumes:
      - .:/app:z
      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
      - /app/node_modules
    command: npm run dev
    ports:
      - '8080:8080'
